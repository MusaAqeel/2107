"use client";

import React, { useState, useEffect } from 'react';
import styles from './page.module.css';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { createClient } from "@/utils/supabase/client";

interface SpotifyTrack {
    title: string;
    artist: string;
}

interface GPTResponse {
    recommendations: {
        recommendations: SpotifyTrack[];
    };
    track_ids: string[];
}

const Chat = () => {
    // User sets LLM Prompt and Playlist Length
    const [inputValue, setInputValue] = useState<string>("");
    const [playlistLength, setPlaylistLength] = useState<number>(5);

    // Page states
    const [generating, setGenerating] = useState<boolean>(false);
    const [savePlaylist, setSavePlaylist] = useState<boolean>(false);
    const [showLLMOutput, setShowLLMOutput] = useState<boolean>(false);
    const [showInputAlert, setShowInputAlert] = useState<boolean>(false);
    const [playlistURL, setPlaylistURL] = useState<string | undefined>(undefined);
    const [showLink, setShowLink] = useState<boolean>(false);

    // Handle Data, Error, and Access Token
    const [data, setData] = useState<GPTResponse | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [accessToken, setAccessToken] = useState<string | null>(null);

    // User sets Spotify Playlist Name and Description
    const [playlistName, setPlaylistName] = useState<string>("Your Mixify Mix");
    const [playlistDescription, setPlaylistDescription] = useState<string>("A mix of songs generated by Mixify");
    
    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setInputValue(event.target.value.substring(0, 25));
    };

    const handlePlaylistLengthChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setPlaylistLength(parseInt(event.target.value));
    };

    const handlePlaylistNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setPlaylistName(event.target.value);
    };

    const handlePlaylistDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setPlaylistDescription(event.target.value.substring(0, 300));
    };
    
    useEffect(() => {
        const getSpotifyToken = async () => {
            try {
                const supabase = createClient();
                const { data: { user } } = await supabase.auth.getUser();
                
                if (!user) {
                    throw new Error('Not authenticated');
                }
        
                const { data: spotifyConnection, error: connectionError } = await supabase
                    .from('user_connections')
                    .select('*')
                    .eq('user_id', user.id)
                    .eq('provider', 'spotify')
                    .single();
        
                if (connectionError || !spotifyConnection?.access_token) {
                    throw new Error('Spotify not connected');
                }
                
                setAccessToken(spotifyConnection.access_token);
            } catch (err) {
                setError(err instanceof Error ? err.message : 'Failed to get Spotify token');
            }
        };
    
        getSpotifyToken();
    }, []);

    useEffect(() => {
        if (!accessToken) {
            setError('No Spotify Account Connected');
        } else {
            setError(null);
        }
    }, [accessToken]);

    const handlePromptSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
        setShowInputAlert(false);
        
        if (inputValue.trim() === "") {
            setShowInputAlert(true);
            return;
        }

        setGenerating(true);

        try {
            const response = await fetch("http://localhost:8000/api/generate", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    prompt: inputValue,
                    auth_token: accessToken,
                    playlist_length: playlistLength,
                }),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const responseData = await response.json();
            setData(responseData);
            setShowLLMOutput(true);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to generate recommendations');
        } finally {
            setGenerating(false);
        }
    };

    const handlePlaylistSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
        setSavePlaylist(true);

        try {
            const queryParams = new URLSearchParams({
                title: playlistName,
                description: playlistDescription,
            });
        
            const response = await fetch(
                `http://localhost:8000/api/playlist?${queryParams.toString()}`,
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${accessToken}`,
                    },
                    body: JSON.stringify(data?.track_ids),
                }
            );

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const playlistUrl = await response.json();
            setPlaylistURL(playlistUrl);
            setShowLink(true);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to create playlist');
            setSavePlaylist(false);
        }
    };

    return (
        <> 
            {!showLLMOutput ? (
                <div className={styles.container}>
                    <div className={styles.title}><h1>Mixify</h1></div>
                    <form className={styles.form} data-testid='form' onSubmit={handlePromptSubmit}>
                        <h2>What can I help you with today?</h2>
                        <Input 
                            maxLength={25} 
                            data-testid='textInput' 
                            value={inputValue} 
                            onChange={handleInputChange}
                            placeholder="Enter your music request..."
                        />
                        {showInputAlert && (
                            <Alert data-testid='invalidInputAlert'>
                                <AlertTitle>Invalid Input</AlertTitle>
                                <AlertDescription>
                                    Please enter a valid input.
                                </AlertDescription>
                            </Alert>
                        )}
                        <div className={styles.slider}>
                            <h2>Choose your playlist length:</h2>
                            <input
                                type="range"
                                min="1"
                                max="25"
                                value={playlistLength}
                                onChange={handlePlaylistLengthChange}
                                data-testid='sliderInput'
                            />
                            <span>{playlistLength}</span>
                        </div>
                        {error !== null && (
                            <Alert variant="destructive">
                                <AlertTitle>Error</AlertTitle>
                                <AlertDescription>{error}</AlertDescription>
                            </Alert>
                        )}
                        <Button 
                            variant="outline" 
                            size="lg" 
                            type="submit" 
                            onClick={handlePromptSubmit} 
                            data-testid='submitButton' 
                            disabled={error !== null || generating}
                        >
                            {generating ? 'Generation in process...' : 'Submit'}
                        </Button>
                    </form>
                </div> 
            ) : (        
                <div className={styles.results}>
                    <Alert data-testid='alert'>
                        <AlertTitle>Playlist Created!</AlertTitle>
                        <AlertDescription>
                            <table className={styles.recommendationsTable}>
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Artist</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {data?.recommendations.recommendations.map((recommendation, index) => (
                                        <tr key={index}>
                                            <td>{recommendation.title}</td>
                                            <td>{recommendation.artist}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </AlertDescription>
                    </Alert>

                    {showLink ? (                    
                        <Alert data-testid='alert' className={styles.playlistLink}>
                            <a href={playlistURL} target="_blank" rel="noopener noreferrer">
                                Open playlist in Spotify
                            </a>
                        </Alert>
                    ) : null}

                    {!savePlaylist && (
                        <div className={styles.playlistForm}>
                            <Input 
                                data-testid='playlistNameInput' 
                                value={playlistName} 
                                onChange={handlePlaylistNameChange}
                                placeholder="Playlist Name" 
                                className={styles.input}
                            />
                            <Input 
                                maxLength={300} 
                                data-testid='playlistDescriptionInput' 
                                value={playlistDescription} 
                                onChange={handlePlaylistDescriptionChange}
                                placeholder="Playlist Description"
                                className={styles.input}
                            />
                        </div>
                    )}

                    <Button 
                        variant="outline" 
                        size="lg" 
                        type="submit" 
                        onClick={handlePlaylistSubmit} 
                        data-testid='saveButton' 
                        disabled={savePlaylist}
                        className={styles.saveButton}
                    >
                        {savePlaylist ? 'Saved!' : 'Save to Spotify'}
                    </Button>
                </div>
            )}
        </>
    );
};

export default Chat;